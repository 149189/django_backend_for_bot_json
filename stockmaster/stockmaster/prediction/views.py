# prediction/views.py

import random
from django.http import JsonResponse
from django.views.decorators.http import require_http_methods
from .models import UserTransaction

@require_http_methods(["GET"])
def predict_next_week_spends(request):
    """
    Predicts next week's spend for each category by fetching the latest transaction data from the database.
    
    For each category, if historical data exists, the forecast is generated by applying a small ±5% variation 
    to the historical daily average. If no historical data is found, then:
      - "Medical" and "Entertainment" get higher predictions (random values between 300 and 500),
      - "Travel" and "Investment" get intermediate predictions (random values between 150 and 350),
      - The remaining categories get default predictions (random values between 50 and 300).
    
    Returns JSON output in the format:
    [
      {
        "category": "Food",
        "next_week_predictions": [ ... 7 values ... ],
        "total_predicted_next_week": total_value
      },
      ... other categories ...
    ]
    """
    
    categories = [
        "Food",
        "Travel",
        "Investment",
        "Utilities",
        "Entertainment",
        "Medical",
        "Shopping"
    ]
    
    predictions_output = []
    
    for cat in categories:
        # Fetch transactions for the given category from the database (using case-insensitive filtering)
        transactions = UserTransaction.objects.filter(category__iexact=cat)
        
        # Compute daily totals by grouping transactions by date.
        daily_totals = {}
        for txn in transactions:
            txn_date = txn.date  # assuming this is a date object
            daily_totals[txn_date] = daily_totals.get(txn_date, 0) + float(txn.amount)
        
        # Calculate the historical daily average spend.
        if daily_totals:
            average_daily = sum(daily_totals.values()) / len(daily_totals)
        else:
            average_daily = 0.0
        
        # Generate predictions for the next 7 days.
        if average_daily == 0:
            # No historical data found; assign values based on the category.
            if cat in ["Medical", "Entertainment"]:
                # Higher values for Medical and Entertainment
                next_week_predictions = [round(random.uniform(300, 500), 2) for _ in range(7)]
            elif cat in ["Travel", "Investment"]:
                # Intermediate values for Travel and Investment
                next_week_predictions = [round(random.uniform(150, 350), 2) for _ in range(7)]
            else:
                # Default range for other categories
                next_week_predictions = [round(random.uniform(50, 300), 2) for _ in range(7)]
        else:
            # Use historical average with a ±5% variation.
            next_week_predictions = [round(average_daily * random.uniform(0.95, 1.05), 2) for _ in range(7)]
        
        total_predicted = round(sum(next_week_predictions), 2)
        
        predictions_output.append({
            "category": cat,
            "next_week_predictions": next_week_predictions,
            "total_predicted_next_week": total_predicted
        })
    
    return JsonResponse(predictions_output, safe=False)
